framework
library
design pattern 
개념 

django는 MVC design pattern을 따른다.
application구조화를 위한 대표적인 패턴임

forms.ModelForm vs. forms.Form

★★★
cookie와 session의 개념
cookie와 session의 차이점
Django인증시스템 활용하기 
★★★

※HTTP구조
웹에서의 통신 규약.
(특징)
-비연결 지향(Connectionless) : 서버에서 클라이언트의 요청을 처리하고 나면 해당 클라이언트와의 연결을 끊음
-> 한 번 연결된 이상 그 연결을 끊지 않는다면 서버가 부하를 감당하지 못 함, 따라서 모든 연결을 유지하는 것보다는 더 많은 새로운 연결을 가능하게
하는 방식을 지향
-> 매 요청 시마다 연결을 맺고 또 끊어야 하므로 이에 따른 리소스가 추가적으로 발생한다는 단점이 있음
-무상태(Stateless) : 서버가 클라이언트의 정보(상태)를 저장하고 있지 않음
-> 서버에 요청을 보낼 때마다, 클라이언트가 모든 정보를 같이 전달해야 함
-> 서버가 정보를 저장하지 않아도 된다는 장점이 있지만, 요청에 담기는 정보가 복잡해진다는 단점이 있음
=> 이러한 단점을 해결하기 위해 쿠키와 세션을 도입함

쿠키 : 클라이언트(브라우저)에 저장하는 데이터 조각(예를 들어 session id도 될 수 있음)
-최대 크기와 최대 수량은 브라우저마다 다름
-최초에 쿠키는 서버에서 응답과 함께 브라우저로 전송
-브라우저는 쿠키를 key-value의 데이터 형식으로 저장
-브라우저가 동일한 서버(요청을 보낸 이력이 있는)에 요청을 보내는 경우, 해당 서버에서 받은 쿠키를 함께 전달
-서버는 쿠키를 통해 요청을 보낸 브라우저를 식별함 
(장점)
-서버의 리소스 부담 경감
(단점)
-클라이언트에서 요청을 보낼 때마다 쿠키를 함께 보내야 하기 때문에 상대적으로 보안이 취약
세션 : 클라이언트와 서버 사이의 상태를 유지하기 위해 서버에 상태 정보를 저장하는 방식 
-데이터 저장을 서버에 하고, 해당 데이터를 찾을 수 있는 key(session id)를 클라이언트가 가짐  
-요청을 보낼 때마다 세션 아이디를 전달하면 서버는 해당 세션 아이디를 이용하여 사용자 데이터를 조회
(장점)
-상대적으로 보안이 철저함
(단점)
-서버가 세션 데이터를 저장하기 때문에 리소스 부담이 증가
-서버 측에서 세션 아이디를 이용해 사용자 데이터를 조회해야 함  

※JWT(Json Web Token)
반드시 알아야 할 사용자 인증 구현 방식
